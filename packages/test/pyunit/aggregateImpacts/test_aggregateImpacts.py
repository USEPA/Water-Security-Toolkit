#  _________________________________________________________________________
#
#  TEVA-SPOT Toolkit: Tools for Designing Contaminant Warning Systems
#  Copyright (c) 2008 Sandia Corporation.
#  This software is distributed under the BSD License.
#  Under the terms of Contract DE-AC04-94AL85000 with Sandia Corporation,
#  the U.S. Government retains certain rights in this software.
#  For more information, see the README file in the top software directory.
#  _________________________________________________________________________

#
# Perform functionality test for aggregateImpacts
#
import os
import sys
from os.path import abspath, dirname
sys.path.insert(0, dirname(dirname(abspath(__file__)))+os.sep+".."+os.sep+"..")
currdir = dirname(abspath(__file__))+os.sep

import unittest
import pyutilib.th
import pyutilib.subprocess
from pywst.spot import pyunit
from nose.tools import nottest
import shutil

netdir = pyunit.datadir + "Net3" + os.sep
modeldir=pyunit.moddir

#
# Create unittest testing class
#
# Methods test_* are executed (in an arbitrary order)
# The setUp() method is run before every test.
# The tearDown() method is run after every test.
#
class Test(pyutilib.th.TestCase):

    def create_command(self, infile, nlines):
        """ Create the command line """
        return "aggregateImpacts --read-limit "+ str(nlines) + " " + infile

    @nottest
    def execute_test(self, name, nlines):
        """ Execute a test given different information """

        cmd = self.create_command(currdir+name+".config", nlines)
        print "Running",cmd
        pyutilib.subprocess.run(cmd, currdir+name+".out", cwd=currdir)
        #
        # Compare various files generated by scenarioAggr against reference versions
        #
        self.assertFileEqualsBaseline(currdir+name+"_agg.impact",currdir+name+"_agg.txt")
        os.remove(currdir+name+"_map.config")
        os.remove(currdir+name+"_earliest.config")
        #os.remove(currdir+name+"_agg.impact")
        os.remove(currdir+name+"_agg.config")
        os.remove(currdir+name+".out")

    # Tests with distinguished detection 

    def test1a_0(self):
        """ aggregateImpacts tested on test1a.impact - no limit"""
        self.execute_test("test1a", 0)

    def test2a_0(self):
        """ aggregateImpacts tested on test2a.impact - no limit"""
        self.execute_test("test2a", 0)

    def test3a_0(self):
        """ aggregateImpacts tested on test3a.impact - no limit"""
        self.execute_test("test3a", 0)

    def test4a_0(self):
        """ aggregateImpacts tested on test4a.impact - no limit"""
        self.execute_test("test4a", 0)

    # Tests with fixed locations

    def test2c_0(self):
        """ aggregateImpacts tested on test2c.impact - no limit"""
        self.execute_test("test2c", 0)

    def test3c_0(self):
        """ aggregateImpacts tested on test3c.impact - no limit"""
        self.execute_test("test3c", 0)

    def test4c_0(self):
        """ aggregateImpacts tested on test4c.impact - no limit"""
        self.execute_test("test4c", 0)

if __name__ == "__main__":
    unittest.main()

