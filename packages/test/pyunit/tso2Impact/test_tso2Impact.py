#  _________________________________________________________________________
#
#  TEVA-SPOT Toolkit: Tools for Designing Contaminant Warning Systems
#  Copyright (c) 2008 Sandia Corporation.
#  This software is distributed under the BSD License.
#  Under the terms of Contract DE-AC04-94AL85000 with Sandia Corporation,
#  the U.S. Government retains certain rights in this software.
#  For more information, see the README file in the top software directory.
#  _________________________________________________________________________

#
# Perform functionality test for tso2Impact
#
import os
import sys
from os.path import abspath, dirname, join, normpath

basedir = normpath(join(dirname(abspath(__file__)),'..','..','..','..'))
bindir = join(basedir, 'bin')
#sys.path.insert(0, normpath(join(dirname(abspath(__file__)),'..','..','..')))
currdir = dirname(abspath(__file__))

import shutil
import unittest
import pyutilib.subprocess
import pyutilib.th
from pywst.spot import pyunit
from nose.tools import nottest

test1dir = join(pyunit.datadir, "test1")
netdir = join(pyunit.datadir, "wst", "data", "Net3")
tsodir = join(netdir, pyunit.system_type())
hourlydir = tsodir
modeldir=pyunit.moddir

#
# Create unittest testing class
#
# Methods test_* are executed (in an arbitrary order)
# The setUp() method is run before every test.
# The tearDown() method is run after every test.
#
# TODO: I think we can be more clever, and create the test1(), test2(), ... methods
# automatically.
#
class Test(pyutilib.th.TestCase):

    def create_command(self, network, impacts, frequency, name=None, tai_file=""):
        """ Create the command line """
        if name is None:
           name = network+"_"+frequency
        cmd = [ join(bindir,"tso2Impact"), 
                "--"+impacts, 
                name, 
                join(tsodir,network+"_"+frequency+".erd"), 
                ]
        if tai_file:
            cmd.append(tai_file)
        return cmd

    @nottest
    def execute_test(self, network, frequency, impact, name):
        """ Execute a test given different information """
        basename=network+"_"+frequency
        if impact in ["pd","pk","pe","dpd","dpk","dpe"]:
            tai_file = join(netdir,"bio.tai")
            testname=basename+"_bio"
        else:
            tai_file = ""
            testname=network+"_"+frequency
        cmd = self.create_command(network,impact,frequency,testname,tai_file)
        print "Running",cmd
        rc, out = pyutilib.subprocess.run(
            cmd, join(currdir,name+".out"), cwd=currdir)
        if rc:
            raise RuntimeError(out)

        #
        # Compare various files generated by tso2Impact against
        # reference versions
        #
        fname=testname+"_"+impact+".impact"
        self.assertFileEqualsBaseline(join(currdir,fname),join(tsodir,fname))
        fname=testname+"_"+impact+".impact.id"
        self.assertFileEqualsBaseline(join(currdir,fname),join(tsodir,fname))
        fname=testname+".nodemap"
        self.assertFileEqualsBaseline(join(currdir,fname),join(tsodir,fname))
        fname=testname+".scenariomap"
        self.assertFileEqualsBaseline(join(currdir,fname),join(tsodir,fname))
        os.remove(join(currdir,name+".out"))

    def test_ec(self):
        #""" tso2Impact tested on Net3_quarterly ec """
        self.execute_test("Net3","quarterly","ec","test_ec")

    def test_vc(self):
        #""" tso2Impact tested on Net3_quarterly vc """
        self.execute_test("Net3","quarterly","vc","test_vc")

    def test_td(self):
        #""" tso2Impact tested on Net3_quarterly td """
        self.execute_test("Net3","quarterly","td","test_td")

    def test_mc(self):
        #""" tso2Impact tested on Net3_quarterly mc """
        self.execute_test("Net3","quarterly","mc","test_mc")

    def Xtest_dec(self):
        #""" tso2Impact tested on Net3_quarterly dec """
        self.execute_test("Net3","quarterly","dec","test_dec")

    def Xtest_dvc(self):
        #""" tso2Impact tested on Net3_quarterly dvc """
        self.execute_test("Net3","quarterly","dvc","test_dvc")

    def Xtest_dtd(self):
        #""" tso2Impact tested on Net3_quarterly dtd """
        self.execute_test("Net3","quarterly","dtd","test_dtd")

    def Xtest_dmc(self):
        #""" tso2Impact tested on Net3_quarterly dmc """
        self.execute_test("Net3","quarterly","dmc","test_dmc")

    def test_nfd(self):
        #""" tso2Impact tested on Net3_quarterly nfd """
        self.execute_test("Net3","quarterly","nfd","test_nfd")

    def test_pe(self):
        #""" tso2Impact tested on Net3_quarterly pe """
        self.execute_test("Net3","quarterly","pe","test_pe")

    def test_pk(self):
        #""" tso2Impact tested on Net3_quarterly pk """
        self.execute_test("Net3","quarterly","pk","test_pk")

    def test_pd(self):
        #""" tso2Impact tested on Net3_quarterly pd """
        self.execute_test("Net3","quarterly","pd","test_pd")

    # What is an easy way to test the d* measures?
    def Xtest_dpe(self):
        #""" tso2Impact tested on Net3_quarterly dpe """
        self.execute_test("Net3","quarterly","dpe","test_dpe")

    def Xtest_dpk(self):
        #""" tso2Impact tested on Net3_quarterly dpk """
        self.execute_test("Net3","quarterly","dpk","test_dpk")

    def Xtest_dpd(self):
        #""" tso2Impact tested on Net3_quarterly dpd """
        self.execute_test("Net3","quarterly","dpd","test_dpd")

    def test_largeQuality1(self):
        #""" Verify that a very large quality creates an impact with only
        #dummy detections for mc """
        network="Net3"
        frequency="quarterly"
        testname=network+"_"+frequency
        impact="mc"
        cmd = self.create_command(network,impact,frequency,testname)
        cmd = cmd[:1] + ["--detectionLimit", "1000000.0"] + cmd[1:]
        print "Running",cmd
        rc,out = pyutilib.subprocess.run(
            cmd, "largeQuality_mc.out", cwd=currdir)
        if rc:
            raise RuntimeError(out)      
  
        fname=testname+"_"+impact+".impact"
        shutil.move(join(currdir,fname), join(currdir,'largeQuality_mc.out'))
        self.assertFileEqualsBaseline( join(currdir,"largeQuality_mc.out"),
                                       join(tsodir,"largeQuality_mc.impact") )
        
    def test_largeQuality2(self):
        #""" Verify that a very large quality does not impact the value
        #of dummy detections for 'ec' """
        network="Net3"
        frequency="quarterly"
        testname=network+"_"+frequency
        impact="ec"
        cmd = self.create_command(network,impact,frequency,testname)
        cmd = cmd[:1] + ["--detectionLimit", "1000000.0"] + cmd[1:]
        print "Running",cmd
        rc,out = pyutilib.subprocess.run(
            cmd, "largeQuality_ec.out", cwd=currdir)
        if rc:
            raise RuntimeError(out)

        fname=testname+"_"+impact+".impact"
        shutil.move(join(currdir,fname), join(currdir,'largeQuality_ec.out'))
        self.assertFileEqualsBaseline( join(currdir,"largeQuality_ec.out"),
                                       join(tsodir,"largeQuality_ec.impact") )
        
    def test_multi_quality1(self):
        #""" Verify that tso2Impact can work with multiple quality values
        #  - mc"""
        cmd = [ join(bindir,"tso2Impact"),
                "--detectionLimit","100000.0",
                "--mc",
                "multi_quality",
                join(hourlydir,"Net3_hourly.erd"),
                join(hourlydir,"Net3_quarterly.erd") ]
        print "Running ",cmd
        rc,out = pyutilib.subprocess.run(cmd, "multi_quality.out", cwd=currdir)
        if rc:
            raise RuntimeError(out)

        self.assertFileEqualsBaseline( join(currdir,"multi_quality_mc.impact"),
                                       join(tsodir,"multi_quality_mc.impact") )
        os.remove(join(currdir,"multi_quality.out"))
        os.remove(join(currdir,"multi_quality_mc.impact.id"))
        os.remove(join(currdir,"multi_quality.nodemap"))
        os.remove(join(currdir,"multi_quality.scenariomap"))

    def test_multi_quality2(self):
        #"""Verify that tso2Impact can work with multiple quality values - pd"""
        cmd = [ join(bindir,"tso2Impact"),
                "--detectionLimit","100000.0",
                "--pd",
                "multi_quality",
                join(hourlydir,"Net3_hourly.erd"),
                join(hourlydir,"Net3_quarterly.erd"),
                join(netdir,"bio.tai"),
                join(netdir,"bio.tai") ]
        print "Running ",cmd
        rc,out = pyutilib.subprocess.run(cmd, "multi_quality.out", cwd=currdir)
        if rc:
            raise RuntimeError(out)

        self.assertFileEqualsBaseline( join(currdir,"multi_quality_pd.impact"),
                                       join(tsodir,"multi_quality_pd.impact") )
        os.remove(join(currdir,"multi_quality.out"))
        os.remove(join(currdir,"multi_quality_pd.impact.id"))
        os.remove(join(currdir,"multi_quality.nodemap"))
        os.remove(join(currdir,"multi_quality.scenariomap"))

    def test_responseTime1(self):
        #""" Verify that a nonzero responseTime increases impacts, except
        #for the dummy """
        #
        # This was confirmed by visual inspection.  A more precise test would
        # compare the impact files with/without a response time.
        #
        cmd = [ join(bindir,"tso2Impact"),
                "--responseTime",
                "100.0",
                "--mc",
                "responseTime1",
                join(tsodir,"Net3_quarterly.erd") ]
        print "Running ",cmd
        rc,out = pyutilib.subprocess.run(cmd, "responseTime1.out", cwd=currdir)
        if rc:
            raise RuntimeError(out)

        self.assertFileEqualsBaseline( join(currdir,"responseTime1_mc.impact"),
                                       join(tsodir,"responseTime1_mc.impact") )
        os.remove(join(currdir,"responseTime1.out"))
        os.remove(join(currdir,"responseTime1_mc.impact.id"))
        os.remove(join(currdir,"responseTime1.nodemap"))
        os.remove(join(currdir,"responseTime1.scenariomap"))

if __name__ == "__main__":
    unittest.main()

