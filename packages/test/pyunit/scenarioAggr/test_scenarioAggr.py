#  _________________________________________________________________________
#
#  TEVA-SPOT Toolkit: Tools for Designing Contaminant Warning Systems
#  Copyright (c) 2008 Sandia Corporation.
#  This software is distributed under the BSD License.
#  Under the terms of Contract DE-AC04-94AL85000 with Sandia Corporation,
#  the U.S. Government retains certain rights in this software.
#  For more information, see the README file in the top software directory.
#  _________________________________________________________________________

#
# Perform functionality test for scenarioAggr
#
import os
import sys
from os.path import abspath, dirname
sys.path.insert(0, dirname(dirname(abspath(__file__)))+os.sep+".."+os.sep+"..")
currdir = dirname(abspath(__file__))+os.sep

import unittest
import pyutilib.subprocess
import pyutilib.th
from pywst.spot import pyunit
from nose.tools import nottest

#test1dir = pyunit.datadir + "test1"+os.sep
#netdir = pyunit.datadir + "Net3" + os.sep

#
# Create unittest testing class
#
# Methods test_* are executed (in an arbitrary order)
# The setUp() method is run before every test.
# The tearDown() method is run after every test.
##
class Test(pyutilib.th.TestCase):

    def create_command(self, infile, nevents, outfile):
        """ Create the command line """
        return "scenarioAggr --out "+outfile+" --numEvents "+ nevents + " " + infile

    @nottest
    def execute_test(self, name):
        """ Execute a test given different information """
        cmd = self.create_command(currdir+name+".impact", '4', currdir+name+"_saggr.impact")
        print "Running",cmd
        pyutilib.subprocess.run(cmd, currdir+name+".out", cwd=currdir)
        #
        # Compare various files generated by scenarioAggr against reference versions
        #
        self.assertFileEqualsBaseline(currdir+name+"_saggr.impact",currdir+name+".txt")
        os.remove(currdir+name+".out")

    def test(self):
        """scenarioAggr tested on test1.impact"""
        self.execute_test('test1')

    def Xtest_ec(self):
        """ scenarioAggr tested on Net3_quarterly ec """
        self.execute_test("Net3","quarterly","ec","test_ec")

    def Xtest_vc(self):
        """ scenarioAggr tested on Net3_quarterly vc """
        self.execute_test("Net3","quarterly","vc","test_vc")

    def Xtest_td(self):
        """ scenarioAggr tested on Net3_quarterly td """
        self.execute_test("Net3","quarterly","td","test_td")

    def Xtest_mc(self):
        """ scenarioAggr tested on Net3_quarterly mc """
        self.execute_test("Net3","quarterly","mc","test_mc")

    def Xtest_nfd(self):
        """ scenarioAggr tested on Net3_quarterly nfd """
        self.execute_test("Net3","quarterly","nfd","test_nfd")

    def Xtest_pe(self):
        """ scenarioAggr tested on Net3_quarterly pe """
        self.execute_test("Net3","quarterly","pe","test_pe")

    def Xtest_pk(self):
        """ scenarioAggr tested on Net3_quarterly pk """
        self.execute_test("Net3","quarterly","pk","test_pk")

    def Xtest_pd(self):
        """ scenarioAggr tested on Net3_quarterly pd """
        self.execute_test("Net3","quarterly","pd","test_pd")

if __name__ == "__main__":
    unittest.main()

