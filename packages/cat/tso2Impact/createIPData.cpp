/*  _________________________________________________________________________
 *
 *  TEVA-SPOT Toolkit: Tools for Designing Contaminant Warning Systems
 *  Copyright (c) 2008 Sandia Corporation.
 *  This software is distributed under the BSD License.
 *  Under the terms of Contract DE-AC04-94AL85000 with Sandia Corporation,
 *  the U.S. Government retains certain rights in this software.
 *  For more information, see the README.txt file in the top SPOT directory.
 *  _________________________________________________________________________
 */

/**
  * \file setupIPData.cpp
  *
  * Creates an input file for the GeneralSP.mod IP model.
  */

#ifdef HAVE_CONFIG_H
#include <teva_config.h>
#endif
#include "version.h"

#include <utilib/OptionParser.h>
#include <sp/SPProblem.h>

using namespace std;

/// The main routine for setupIPData
int main(int argc, char **argv)
{
   try
   {
      string dataOutputFile;
      bool lagrangianOutput = false;
      double gamma = 0.05;
      bool imperfect = false; // will be a parameter

      utilib::OptionParser options;
      options.add_usage("setupIPData [options...] <config-file>");
      options.description = "A command to generate AMPL data files, which are used by integer programming solvers.";
      std::string version = create_version("setupIPData", __DATE__, __TIME__);
      options.version(version);

      options.add("gamma", gamma, "The fraction of the tail used to compute VaR and TCE statistics");
      options.add("output", dataOutputFile, "The output file");

      /*
      params.create_parameter("lagrangian",lagrangianOutput, "<bool>", "false",
         "Option to produce output for Lagrangian solver instead of for AMPL.");
      params.create_parameter("dat",dataOutputFile, "<string>","<null>",
         "The output filename.  By default, output goes to stdout.");
      params.create_parameter("costs",costFile, "<string>","<null>",
         "The cost file.");
      params.create_parameter("lock-sensors",fixedSensorFile, "<string>","<null>",
         "A file with the locations of pre-fixed sensor locations.");
      params.create_parameter("infeasible",infeasibleLocationsFile, "<string>","<null>",
         "A file with the locations that are infeasible for sensors.");
      params.create_parameter("",infeasibleLocationsFile, "<string>","<null>",
         "A file with the locations that are infeasible for sensors.");
      */

      options.add_argument("config-file", "Contains all of the information needed to setup a sensor placement problem.");
      options.epilog=\
"The setupIPData executable is used to setup an integer programming problem\
for sensor placement that can be solved using the GeneralSP IP model.\
The configuration file input file is generated by the sp optimization\
script.  The output of this executable consists of AMPL data commands\
that are used to generate an instance of the GeneralSP IP model.";


      utilib::OptionParser::args_t args = options.parse_args(argc, argv);
      if (options.help_option())
      {
         options.write(std::cout);
         exit(1);
      }
      if (options.version_option())
      {
         options.print_version(std::cout);
         exit(1);
      }
      if (args.size() < 2)
      {
         options.write(std::cerr);
         return 1;
      }

      ifstream ifstr;
      ifstr.open(args[1].c_str(), ios::in);
      if (ifstr.is_open() != true)
         EXCEPTION_MNGR(runtime_error, "Bad filename " << args[1]);

      SPProblem info;
      info.gamma = gamma;

// This says read entire impact file into memory (the default).  The
// EventImpacts object of the SPGoalInfo object is capable of reading
// the impact files in from disk in chunks, each chunk replacing the
// previous one.  But we can't use that capability here because the
// output functions below require all of the impacts in core.
// info.SetReadAllImpacts(false).)

      info.SetReadAllImpacts(true);

//
// Read in the problem data
//
      info.read_config_file(ifstr);
      ifstr.close();

// For now, lagrangian output is always done to files.  The cout version
// is harder to support when we might have goal constraints.
      if (lagrangianOutput)
      {
         info.write_lagrangian_data(imperfect, dataOutputFile);
      }
      else
      {
         //
         // Compute super location information
         //
         info.compute_superlocations();
         //
         // Write the AMPL *.dat file
         //
         if (dataOutputFile != "")
         {
            ofstream ofstr(dataOutputFile.c_str());
            info.write_ampl_data(ofstr, imperfect);
         }
         else
            info.write_ampl_data(cout, imperfect);
      }
   }
   STD_CATCH(;)

   return 0;
}
