import sysimport timeimport stringimport subprocessimport httplibimport osimport tempfileimport base64import uuidimport randomimport shutilimport _guiimport json # Python 2.6 or later################################################# Global DatabLocal = FalsebLocal = TruesHost_local = "127.0.0.1:5984"sDb_local = "/wst/"sHost_local = "192.168.3.6:5984"sDb_local = "/dinesti/"sHost_remote = "optimal.tamu.edu:5984"sDb_remote = "/dinesti/"if bLocal:	sHost = sHost_local	sDb = sDb_localelse:	sHost = sHost_remote	sDb = sDb_remote	m_Locations = []#m_Locations.append({"host":"192.168.3.6:5984","db":"/dinesti_test/"})#m_Locations.append({"host":"192.168.3.6:5984","db":"/dinesti_template/"})#m_Locations.append({"host":"192.168.3.6:5984","db":"/dinesti/"})#m_Locations.append({"host":"192.168.3.6:5984","db":"/dinesti1/"})#m_Locations.append({"host":"192.168.3.6:5984","db":"/dinesti2/"})#m_Locations.append({"host":"192.168.3.6:5984","db":"/dinesti3/"})#m_Locations.append({"host":"192.168.3.6:5984","db":"/dinesti4/"})#m_Locations.append({"host":"192.168.3.6:5984","db":"/dinesti5/"})#m_Locations.append({"host":"192.168.3.6:5984","db":"/dinesti6/"})#m_Locations.append({"host":"192.168.3.6:5984","db":"/dinesti7/"})#m_Locations.append({"host":"192.168.3.6:5984","db":"/dinesti8/"})#m_Locations.append({"host":"192.168.3.6:5984","db":"/dinesti9/"})#m_Locations.append({"host":"192.168.3.6:5984","db":"/dinesti10/"})#m_Locations.append({"host":"127.0.0.1:5984","db":"/wst/"})m_Locations.append({"host":"127.0.0.1:5984","db":"/dinesti/"})m_Locations.append({"host":"127.0.0.1:5984","db":"/dinesti2/"})m_Locations.append({"host":"192.168.3.4:5984","db":"/dinesti1/"})m_Locations.append({"host":"192.168.3.4:5984","db":"/dinesti/"})m_Locations.append({"host":"optimal.tamu.edu:5984","db":"/dinesti/"})#m_Locations.append({"host":"127.0.0.1:5984","db":"/test_code/"})#locations.append({"host":"","db":""})################################################def ModifyCouchDoc():	setGlobals()	uuids = []	# Contamination Simulations	#uuids.append("BDGIJHBACIHGDHJUWDVSUMQUPIKIL") # PUB-1	#uuids.append("BDGIJIFIGIIKAFAXAHPHWXFQVLNXJ") # PUB-2	#uuids.append("BDGIJHKBKBDKDKYZTPCCUJSPHHOIW") # Net3-1	#uuids.append("BDGIJIBIAHBFIMGSDGBKFAMGOBCJH") # Net3-2	# Impact Studies	#uuids.append("BDGIJHGGKGCIHPTIODBXPXNMSHZAI") # 0	#uuids.append("BDGIJHGJGCFKKIPMPIDSWPBYFRXDI") # 1	#uuids.append("BDGIJHGKDFDBACIMQSIFUVXSLCQQV") # 2	#uuids.append("BDGIJHHAIFFAJGRCPGBGGQWNJUOPK") # 3	#uuids.append("BDGIJHHBFCBIJXCFSKWNCGDVPPMSF") # 4	#uuids.append("BDGIJHHCBGHDDMNQFZMNUXTMKWLYG") # 5	#uuids.append("BDGICFDHJIGFBOBDBTGTILHFQSGGR") # PUB	#uuids.append("BDGIJHCHFKAKBAYHNJZBRZXZJCVCS") # PUB.sensors	#uuids.append("BDGIJKGKCAIBHSBNJAKMXBCTGUOUX") # PUB.assets	# Events	#uuids.append("BDGICGBBHAKGGZPGGHBGGHUYGJAPS")	#uuids.append("BDGIJHKBIHFAJRHYOLWJVLZRPQXSY")	#uuids.append("BDGICGJHAKHCIPBCKBLXITTMAJCUZ")	#uuids.append("BDGIJICJFICCGFDFYHZSCZHBXTDFU")	#uuids.append("BDGIJICJFICCGFDFYHZSCZHBXTDFU")	#	uuids.append("BDGJHKGKFJHGJHLZSVPWUTOGKOVMI")	for uuid in uuids:		#res = _gui.httpPut(sDbDesign + "_update/query_set_false/" + uuid + "?body_key=m_hide", "")		#res = _gui.httpPut(sDbDesign + "_update/query_set_true/" + uuid + "?body_key=m_hide", "")		#res = _gui.httpPut(sDbDesign + "_update/query_set_false/" + uuid + "?body_key=m_ImpactList", "")		#res = _gui.httpPut(sDbDesign + "_update/query_set_true/" + uuid + "?body_key=m_ImpactList", "")		#res = _gui.httpPut(sDbDesign + "_update/query_set_false/" + uuid + "?body_key=m_TrainingList", "")		#res = _gui.httpPut(sDbDesign + "_update/query_set_true/" + uuid + "?body_key=m_TrainingList", "")		#s = time.strftime("%Y-%m-%dT%H:%M:%S.001Z",time.gmtime())		#s = "2013-01-11T02:02:00.000Z"		#res = _gui.httpPut(sDbDesign + "_update/query/" + uuid + "?body_key=Date", s)		s = "PUB.square"		res = _gui.httpPut(sDbDesign + "_update/query/" + uuid + "?body_key=name", s)		#s = "Complete"		#res = _gui.httpPut(sDbDesign + "_update/query/" + uuid + "?body_key=status", s)		print res	returndef AddDateToDocuments():	text = _gui.getView("All_Documents")	data = json.loads(text)	for row in data["rows"]:		sDate = time.strftime("%Y-%m-%dT%H:%M:%S.001Z",time.gmtime())		#print sDate		#continue		res = _gui.httpPut(sDbDesign + "_update/query/" + row["id"] + "?body_key=Date", sDate) 		print "_id:" + row["id"] + ", _rev:" + row["value"] + " >> " + str(res.status) + ": " + res.reasondef DeleteTheseDocument():	uuids = []	#uuids.append("BDGCCBIJCCHFGYFBKATQUSLXVSTQA")	#uuids.append("")	for uuid in uuids:		url = sDb + uuid		#url = "/dinesti2/" + uuid		res = _gui.httpGetHead(url)		sRev = json.loads(res[2][1])		print sRev		url = url + "?rev=" + sRev		res = _gui.httpDelete(url)		print str(res.status) + ": " + res.reason	def DeleteDocuments():	data = _gui.getView("DeleteAll")	#text = _gui.getView("m_SimList")	#text = _gui.getView("m_GisList")	#text = _gui.getView("m_GrabList")	#text = _gui.getView("m_ImpactList")	#text = _gui.getView("m_InpList")	#text = _gui.getView("m_InversionList")	#text = _gui.getView("m_MeasureList")	#text = _gui.getView("m_ScenariosList")	#text = _gui.getView("m_TrainingList")	#print text	#print type(text)	#data = json.loads(text)	#print data	i = 0	for row in data["rows"]:		i = i + 1		#print str(i) + ": " + sDb + row["id"]+"?rev="+row["value"]["rev"]		#continue		res = _gui.httpDelete(sDb + row["id"]+"?rev="+row["value"]["rev"])		print "_id:" + row["id"] + ", _rev:" + row["value"]["rev"] + " >> " + str(res.status) + ": " + res.reasondef UpdateFiles():	sPath1 = "/home/smcgee/Dropbox/wst/"	sPath2 = "/Users/smcgee/Dropbox/wst/"	sRepoDir = "/Users/smcgee/Repos/dinesti/trunk/"	sWstDir = "/Users/smcgee/Repos/wst_trunk/"	sIniDir = "/usr/local/etc/couchdb/"	#	sPath = ""	if os.path.exists(sPath1):		sPath = sPath1	if os.path.exists(sPath2):		sPath = sPath2	#	m_FileList = []	m_FileList.append((1, sPath, "d3.v2.js", "text/javascript")) #cant read byte 0xce in position 18715	m_FileList.append((1, sPath, "gui.html","text/html"))	m_FileList.append((1, sPath, "SVGPan-smm-new.js", "text/javascript"))	m_FileList.append((1, sPath, "ClassGlobalData.js", "text/javascript"))	m_FileList.append((1, sPath, "ClassVoterRegistration.js", "text/javascript"))	m_FileList.append((1, sPath, "ClassCouch.js", "text/javascript"))	m_FileList.append((1, sPath, "ClassDataGrid.js", "text/javascript"))	m_FileList.append((1, sPath, "ClassHttpRequest.js","text/javascript"))	m_FileList.append((1, sPath, "ClassNodeGraph.js","text/javascript"))	m_FileList.append((1, sPath, "ClassImpactView.js","text/javascript"))	m_FileList.append((1, sPath, "ClassConfigPanel.js","text/javascript"))	m_FileList.append((1, sPath, "ClassEventView.js","text/javascript"))	m_FileList.append((1, sPath, "ClassEventGrabView.js","text/javascript"))	m_FileList.append((1, sPath, "ClassTimeLine.js","text/javascript"))	m_FileList.append((1, sPath, "ClassNetPopup.js","text/javascript"))	m_FileList.append((1, sPath, "ClassSimList.js","text/javascript"))	m_FileList.append((1, sPath, "ClassDropdown.js","text/javascript"))	m_FileList.append((1, sPath, "ClassNetworkList.js","text/javascript"))	m_FileList.append((1, sPath, "ClassDateList.js","text/javascript"))	m_FileList.append((1, sPath, "ClassTextbox.js","text/javascript"))	m_FileList.append((1, sPath, "ClassCheckbox.js","text/javascript"))	m_FileList.append((1, sPath, "ClassTimebox.js","text/javascript"))	m_FileList.append((1, sPath, "ClassTabview.js","text/javascript"))	m_FileList.append((1, sPath, "ClassTextarea.js","text/javascript"))	m_FileList.append((1, sPath, "ClassControl.js","text/javascript"))	m_FileList.append((1, sPath, "ClassLabel.js","text/javascript"))	m_FileList.append((1, sPath, "ClassFileChooser.js","text/javascript"))	m_FileList.append((1, sPath, "ClassButton.js","text/javascript"))	m_FileList.append((1, sPath, "ClassInversion.js","text/javascript"))	m_FileList.append((1, sPath, "ClassImpact.js","text/javascript"))	m_FileList.append((1, sPath, "ClassMeasureGen.js","text/javascript"))	m_FileList.append((1, sPath, "ClassNetworkFiles.js","text/javascript"))	m_FileList.append((1, sPath, "ClassTraining.js","text/javascript"))	m_FileList.append((1, sPath, "ClassEvents.js","text/javascript"))	m_FileList.append((1, sPath, "ClassGrabSample.js","text/javascript"))	m_FileList.append((1, sPath, "ClassInputPopup.js","text/javascript"))	m_FileList.append((1, sPath, "ClassVerifyPopup.js","text/javascript"))	m_FileList.append((1, sPath, "ClassCloseButton.js","text/javascript"))	m_FileList.append((1, sPath, "ClassGradient.js","text/javascript"))	m_FileList.append((1, sPath, "ClassRunList.js","text/javascript"))	m_FileList.append((1, sPath, "ClassNetworkView.js","text/javascript"))	m_FileList.append((1, sPath, "ClassInversionNavigator.js","text/javascript"))	m_FileList.append((1, sPath, "ClassInversionGrid.js","text/javascript"))	m_FileList.append((1, sPath, "ClassManageNetworks.js","text/javascript"))	m_FileList.append((1, sPath, "ClassWaiting.js","text/javascript"))	m_FileList.append((1, sPath, "ClassClock.js","text/javascript"))	m_FileList.append((1, sPath, "ClassFilterList.js","text/javascript"))	m_FileList.append((1, sPath, "ClassBitMasker.js","text/javascript"))	m_FileList.append((1, sPath, "ClassSvgButton.js","text/javascript"))	m_FileList.append((1, sPath, "ClassLockButton.js","text/javascript"))	m_FileList.append((2, sIniDir, "local.ini","text/plain"))	m_FileList.append((3, sWstDir + "packages/sim/merlion/applications/json_writer/src/json_writer/","json_main.cpp","text/x-c"))	m_FileList.append((5, sWstDir + "packages/sim/merlion/applications/","jsonwriter","application/octet-stream"))	m_FileList.append((4, sWstDir + "packages/sim/merlion/applications/json_writer2/src/json_writer2/","json2_main.cpp","text/x-c"))	m_FileList.append((6, sWstDir + "packages/sim/merlion/applications/","jsonwriter2","application/octet-stream"))	m_FileList.append((7, sPath, "_gui.py", "text/plain"))	m_FileList.append((7, sPath, "_inp.py", "text/plain"))	m_FileList.append((7, sPath, "_tevasim.py", "text/plain"))	m_FileList.append((7, sPath, "_kill.py", "text/plain"))	m_FileList.append((7, sPath, "_erd.py", "text/plain"))	m_FileList.append((7, sPath, "_inversion.py", "text/plain"))	m_FileList.append((7, sPath, "_grab.py", "text/plain"))	m_FileList.append((7, sPath, "_impact.py", "text/plain"))	m_FileList.append((7, sPath, "_measure.py", "text/plain"))	m_FileList.append((7, sPath, "_training.py", "text/plain"))	m_FileList.append((7, sPath, "_events.py", "text/plain"))	m_FileList.append((7, sPath, "_svg.py", "text/plain"))	m_FileList.append((7, sPath, "_uuid.py", "text/plain"))	m_FileList.append((7, sPath, "_gis.py", "text/plain"))	m_FileList.append((7, sPath, "_time.py", "text/plain"))	m_FileList.append((7, sPath, "_canary.py", "text/plain"))	m_FileList.append((7, sPath, "kml.py", "text/plain"))	m_FileList.append((7, sPath, "License.txt", "text/plain"))	#	bCheckDate = False	bCheckDate = True	bContinue = True	while bContinue:		print " "		iloc = 0		for location in m_Locations:			iloc = iloc + 1			print "   < " + str(iloc) + " >   http://" + location["host"] + location["db"]		print " "		which_location = raw_input("Which location do you want to update?")		if not checkForContinue(which_location): return		iloc = int(which_location)		_gui.setHost(m_Locations[iloc-1]["host"])		_gui.setDatabase(m_Locations[iloc-1]["db"])		setGlobals()		try:			t = _gui.getConfig("Date")		except:			t = time.strftime("%Y-%m-%dT%H:%M:%S.001Z",time.gmtime())			doc = _gui.getDoc(sConfigDoc)			doc["Date"] = t			_gui.setDoc(doc)		print "Last Modified Time = " + t		t = time.strptime(t,"%Y-%m-%dT%H:%M:%S.001Z")		t = time.mktime(t)		nFiles = 0		for file in m_FileList:			res = _gui.httpGetHead(sConfigDoc)			sRev = json.loads(res[2][1])			mtime = os.path.getmtime(file[1]+file[2])			tdiff = mtime - t			#print file[1] + file[2]			#print tdiff			if tdiff < -18000 and bCheckDate: # 18000 takes care of the time zone difference			#if tdiff < -21600 and bCheckDate: # 21600 takes care of the time zone difference during daylight savings time				print file[1] + file[2]				continue			nFiles = nFiles + 1			f = open(file[1]+file[2], "r")			headers = {"Content-type":file[3], "Accept":"text/plain"}			try:				res = _gui.httpPut(sConfigDoc + file[2] + "?rev=" + sRev, f.read(), headers)				print res				#print sRev				#print str(res.status) + ": " + res.reason			except:				print "error writing file to couchdb: " + file[2]			sDir = ""			if file[0] == 1: sDir = sRepoDir + "html/"			if file[0] == 2: sDir = sRepoDir + ""			if file[0] == 3: sDir = sRepoDir + "jsonwriter/"			if file[0] == 4: sDir = sRepoDir + "jsonwriter2/"			if file[0] == 5: sDir = sRepoDir + "jsonwriter/"			if file[0] == 6: sDir = sRepoDir + "jsonwriter2/"			if file[0] == 7: sDir = sRepoDir +  "python/"			shutil.copy2(file[1] + file[2], sDir + file[2])		date = time.strftime("%Y-%m-%dT%H:%M:%S.001Z",time.gmtime())		doc = _gui.getConfig()		doc["Date"] = date		_gui.setDoc(doc)		print str(nFiles) + " files were updated at http://" + _gui.getHost() + _gui.getDbName()#		user_input = raw_input("Continue?")#		##		n1 = user_input.find("local")#		n2 = user_input.find("remote")#		n3 = user_input.find(":")#		#print n1,n2,n3,user_input[n3 + 1:]#		if n1 == 0:#			_gui.setHost(sHost_local)#			if n3 > -1:#			else:#				_gui.setDatabase(sDb_local)#			continue#		if n2 == 0:#			_gui.setHost(sHost_remote)#			if n3 > -1:#				_gui.setDatabase("/" + user_input[n3 + 1:] + "/")#			else:#				_gui.setDatabase(sDb_remote)#			continue#			#		##		if not checkForContinue(user_input): return	returndef checkForContinue(input):	if input == "F":		return False	if input == "f":		return False	if input == "False":		return False	if input == "false":		return False	if input == "FALSE":		return False	if input == "N":		return False	if input == "n":		return False	if input == "No":		return False	if input == "no":		return False	if input == "NO":		return False	if input == "Q":		return False	if input == "q":		return False	if input == "Quit":		return False	if input == "quit":		return False	if input == "QUIT":		return False	return Truedef setGlobals():	global sConfigDoc	global sDbDesign	global sDbUpdate	sDb = _gui.getDbName()	sDoc = _gui.getGuiDocName()	sConfigDoc = sDb + sDoc + "/"	sDbDesign = sDb + "_design/gui/"	returndef main():	_gui.setHost(sHost)	_gui.setDatabase(sDb)	setGlobals()	UpdateFiles()	#DeleteTheseDocument()	#DeleteDocuments()	#AddDateToDocuments()	#ModifyCouchDoc()	returnif __name__ == "__main__":	main()