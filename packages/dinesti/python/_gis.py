# Copyright (2013) Sandia Corporation. Under the terms of Contract# DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government # retains certain rights in this software.## This software is released under the FreeBSD license as described # in License.txtimport osimport tempfileimport shutilimport _guiimport kmlimport _uuidimport _eventsimport json # Python 2.6 and laterdef getData(inp_info):	inp_uuid = inp_info["docId"]	inp_doc = _gui.getDoc(inp_uuid)	inp_name = inp_doc["jsonFile"]	inp_json = _gui.getFileDoc(inp_uuid, inp_name)	inp_json["encryption"] = inp_doc["encryption"]	node_ids = inp_json["NodeIds"]	nodes = inp_json["Nodes"]	factor = inp_json["zFactor"]	pipes = inp_json["Pipes"]	return inp_json, node_ids, nodes, factor, pipesdef getSensors(sensors, node_ids, nodes):	list = sensors.splitlines()	sensors = []	for name in list:		if len(name) == 0: continue		if len(name.strip()) == 0: continue		index = node_ids[name]		x = nodes[index]["x"]		y = nodes[index]["y"]		sensors.append({"Name": name, "x": x, "y": y})	return sensorsdef main():	_gui.setHost()	for req in _gui.getRequests():		sDb = _gui.getQuery(req, "db")		_gui.setDatabase(sDb)		config = _gui.getConfig()		sScriptDir = config["config_gis_dir"]		sUuid = _gui.getQuery(req, "uuid")		doc = _gui.getDoc(sUuid)		results = []		sText = ""		bInversion = doc.get("m_InversionList", False)		bTraining = doc.get("m_TrainingList", False)		bEvent = doc.get("m_EventsList", False)		if bInversion:			prelim_results = doc["results"]			inp_info = doc["docFile_INP"]			data, node_ids, nodes, factor, pipes = getData(inp_info)			for node in prelim_results["list"]:				name = node["Nodes"][0]["Name"]				objective = node["Objective"]				size = node["Objective"] / prelim_results["max"]				x = nodes[node_ids[name]]["x"]				y = nodes[node_ids[name]]["y"]				results.append({"Name": name, "Objective": objective, "Size": size, "x": x, "y": y})			#			eventUuid = doc["eventId"]			event = _gui.getDoc(eventUuid)			sensors = event["sensors"]			sensors = getSensors(sensors, node_ids, nodes)			#			sText = kml.printInversionFile(None, results, sensors, data)			#		elif bTraining or bEvent: # GrabSample			grab_uuid = doc["grabId"]			grab_doc = _gui.getDoc(grab_uuid)			prelim_results = grab_doc["grab"]			if bTraining:				sim_uuid = doc["scenario"]				sim_doc = _gui.getDoc(sim_uuid)				inp_info = sim_doc["docFile_INP"]			elif bEvent:				inp_uuid = config["config_event_inp_uuid"]				inp_info = _events.create_docFile_INP(inp_uuid)			else:				_gui.raiseDebugError("this is not a training or event file!")			data, node_ids, nodes, factor, pipes = getData(inp_info)			for node in prelim_results:				name = node["value"].get("location", "")				if len(name) == 0: continue				status = node["value"].get("status", "")				time = node["value"].get("time", -1)				opt = node["value"].get("opt", "")				index = node_ids.get(name, None)				if index == None: continue				x = nodes[index]["x"]				y = nodes[index]["y"]				streams = []				LinkIds = data["LinkIds"]				Links = data["Links"]				downstream = node["value"].get("downstream", [])				for stream in downstream:					index = LinkIds[stream]					link = Links[index]					x1 = float(link["x1"])					y1 = float(link["y1"])					x2 = float(link["x2"])					y2 = float(link["y2"])					x2 = (x1 + x2) / 2.0					y2 = (y1 + y2) / 2.0					x1 = float(x)					y1 = float(y)					streams.append({"name": stream, "x1": x1, "y1": y1, "x2": x2, "y2": y2})				results.append({"Name": name, "Status": status, "x": x, "y": y, "Time": time, "Opt": opt, "downstream": streams})			#			sensors = doc["sensors"]			sensors = getSensors(sensors, node_ids, nodes)			#			sText = kml.printGrabFile(None, results, sensors, data)			#		else:			_gui.raiseDebugError("Error: This is not an inversion doc or Training doc or an Event doc!")		#		sTempDir = tempfile.gettempdir()		os.chdir(sTempDir)		sKmlName = "Export.kml"		sKmlFile = sTempDir + "/" + sKmlName		kml_file = open(sKmlName, "w")		kml_file.write(sText)		kml_file.close()		fileName = "Export.kmz"		sZipFile = sTempDir + "/" + fileName		_gui.removeIfExists(sZipFile)		#for i in range(0,10):		#	shutil.copyfile(sScriptDir + "/kml_inversion" + str(i) + ".png", sTempDir + "/inversion" + str(i) + ".png")		shutil.copyfile(sScriptDir + "/kml_inversion.png"            , sTempDir + "/inversion.png"            )		shutil.copyfile(sScriptDir + "/kml_grabsample_background.png", sTempDir + "/grabsample_background.png")		shutil.copyfile(sScriptDir + "/kml_grabsample_abnormal.png"  , sTempDir + "/grabsample_abnormal.png"  )		shutil.copyfile(sScriptDir + "/kml_grabsample_.png"          , sTempDir + "/grabsample_.png"          )		shutil.copyfile(sScriptDir + "/kml_reservoir.png"            , sTempDir + "/reservoir.png"            )		shutil.copyfile(sScriptDir + "/kml_junction.png"             , sTempDir + "/junction.png"             )		shutil.copyfile(sScriptDir + "/kml_tank.png"                 , sTempDir + "/tank.png"                 )		shutil.copyfile(sScriptDir + "/kml_sensor.png"               , sTempDir + "/sensor.png"               )		args = []		args.append("zip")		args.append(fileName)		args.append(sKmlName)		#for i in range(0,10):		#	args.append("inversion" + str(i) + ".png") 		args.append("inversion.png"            )		args.append("grabsample_background.png")		args.append("grabsample_abnormal.png"  )		args.append("grabsample_.png"          )		args.append("reservoir.png"            )		args.append("junction.png"             )		args.append("tank.png"                 )		args.append("sensor.png"               )		sRetVal = _gui.startProcess(args)		file_uuid = _uuid.run()		data = {"m_GisList": True, "fileName": fileName, "Date": _gui.getDate()}		doc = _gui.setGetDoc(file_uuid, data)		f = open(sZipFile, "rb")		sText = f.read()		doc = _gui.addAttachment(doc, fileName, "application/vnd.google-earth.kmz", sText)		_gui.removeFile(kml_file)		_gui.removeFile(sZipFile)		if bInversion:			pass		elif bTraining or bEvent: # GrabSample			doc = _gui.getDoc(sUuid)			doc["status"] = doc["statusOld"]			_gui.setDoc(doc)		_gui.respond({"uuid": file_uuid, "fileName": fileName})if __name__ == "__main__":	main()																						