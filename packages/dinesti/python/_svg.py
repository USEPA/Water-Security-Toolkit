# Copyright (2013) Sandia Corporation. Under the terms of Contract# DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government # retains certain rights in this software.## This software is released under the FreeBSD license as described # in License.txtimport timeimport stringimport subprocessimport osimport tempfileimport base64import _guiimport json # Python 2.6 or laterdef main():	_gui.setHost()	for req in _gui.getRequests():		sDb = _gui.getQuery(req, "db")		_gui.setDatabase(sDb)		sUuid = _gui.getQuery(req, "uuid")                        # get the document ID from the REST query		doc = _gui.getDoc(sUuid)                                  # get the document from the couch database		sSvgText = doc["text"]                                    # get the svg string from the client		sW = str(doc["w"])                                        # get the svg dimensions of the client window		sH = str(doc["h"])                                        # get the svg dimensions of the client window		sOldName = doc["oldName"]                                 # INP file name (including extension)		sTitle = os.path.splitext(sOldName)[0]                    # remove the extension		sSvgName = sTitle + "." + "svg"                           # SVG file name		sPngName = sTitle + "." + "png"                           # PNG file name		sDir = tempfile.gettempdir()                              # get the temp directory location		f = open(sDir + "/" + sSvgName, "w")                      # open a pipe to write the SVG file to disk		f.write(sSvgText)                                         # write the file		f.close()                                                 # close the pipe		#		os.chdir(sDir)                                            # change the directory to the temp dir		args = []                                                 # create an argument list for the call to ImageMagick's convert utility		args.append("convert")                                    # "convert" is in the PATH environment variable		args.append(sSvgName)                                     # "convert" can figure out what you want to convert from and convert to		args.append("-crop")                                      # crop the image to the view the user was seeing		args.append(sW + "x" + sH + "!+0+0")                      # specifies the final image size		#args.append(sSvgName)                                     # "convert" can figure out what you want to convert from and convert to		args.append(sPngName)                                     # simply by looking at the file extensions of the 2 arguments (.svg & .png)		sText = _gui.startProcess(args)                           # make the call to the convert utility to create the PNG file		bExists = os.path.exists(sPngName)                        # check to see that the png file was created		f = open(sDir + "/" + sPngName, "rb")                     # open a pipe to the png file		sPngText = f.read()                                       # read the binary data from the png file		sPngText64 = base64.b64encode(sPngText)                   # encode the binary data to base 64		sType = "image/png"                                       # TODO - i cant figure out what the best "content_type" to use to make this file download...		sAttach = {sPngName: {"content_type": sType, "data": sPngText64}}		doc["_attachments"] = sAttach                             # add the attachment data to the document		_gui.setDoc(doc)                                          # save the document back to the database		#		sType = "application/octet-stream"                        # even though the svg file is a text file make it look like an executable so it downloads properly in the browser		_gui.uploadFile(sUuid, sSvgName, sType, sSvgText)         # upload the svg file to the couch database		#		_gui.removeFile(sDir + "/" + sSvgName)                    # remove the two temp files		_gui.removeFile(sDir + "/" + sPngName)                    # (TITLE.svg & TITLE.png)		res = {"uuid": sUuid, "svg": sSvgName, "png": sPngName}   # create the return dictionary		_gui.respondJSON(json.dumps(res))                         # respond to the clients web request with a resultif __name__ == "__main__":	main()