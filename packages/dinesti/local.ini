; CouchDB Configuration Settings

; Custom settings should be made in this file. They will override settings
; in default.ini, but unlike changes made to default.ini, this file wont be
; overwritten on server upgrade.

[external]
inp = python /Users/smcgee/Dropbox/wst/_inp.py
tevasim = python /Users/smcgee/Dropbox/wst/_tevasim.py
kill = python /Users/smcgee/Dropbox/wst/_kill.py
erd = python /Users/smcgee/Dropbox/wst/_erd.py
inversion = python /Users/smcgee/Dropbox/wst/_inversion.py
grab = python /Users/smcgee/Dropbox/wst/_grab.py
impact = python /Users/smcgee/Dropbox/wst/_impact.py
measure = python /Users/smcgee/Dropbox/wst/_measure.py
training = python /Users/smcgee/Dropbox/wst/_training.py
events = python /Users/smcgee/Dropbox/wst/_events.py
svg = python /Users/smcgee/Dropbox/wst/_svg.py
uuid = python /Users/smcgee/Dropbox/wst/_uuid.py
gis = python /Users/smcgee/Dropbox/wst/_gis.py
time = python /Users/smcgee/Dropbox/wst/_time.py
canary = python /Users/smcgee/Dropbox/wst/_canary.py

[httpd_db_handlers]
_inp = {couch_httpd_external, handle_external_req, <<"inp">>}
_tevasim = {couch_httpd_external, handle_external_req, <<"tevasim">>}
_kill = {couch_httpd_external, handle_external_req, <<"kill">>}
_erd = {couch_httpd_external, handle_external_req, <<"erd">>}
_inversion = {couch_httpd_external, handle_external_req, <<"inversion">>}
_grab = {couch_httpd_external, handle_external_req, <<"grab">>}
_impact = {couch_httpd_external, handle_external_req, <<"impact">>}
_measure = {couch_httpd_external, handle_external_req, <<"measure">>}
_training = {couch_httpd_external, handle_external_req, <<"training">>}
_events = {couch_httpd_external, handle_external_req, <<"events">>}
_svg = {couch_httpd_external, handle_external_req, <<"svg">>}
_uuid = {couch_httpd_external, handle_external_req, <<"uuid">>}
_gis = {couch_httpd_external, handle_external_req, <<"gis">>}
_time = {couch_httpd_external, handle_external_req, <<"time">>}
_canary = {couch_httpd_external, handle_external_req, <<"canary">>}

[query_servers]
python = /usr/local/share/python/couchpy

[uuids]
; Known algorithms:
;   random - 128 bits of random awesome
;     All awesome, all the time.
;   sequential - monotonically increasing ids with random increments
;     First 26 hex characters are random. Last 6 increment in
;     random amounts until an overflow occurs. On overflow, the
;     random prefix is regenerated and the process starts over.
;   utc_random - Time since Jan 1, 1970 UTC with microseconds
;     First 14 characters are the time in hex. Last 18 are random.
;algorithm = sequential
algorithm = utc_random

[couchdb]
;max_document_size = 4294967296 ; bytes
os_process_timeout = 60000

[log]
;level = debug
level = info
;level = error

[httpd]
port = 5984
;bind_address = 127.0.0.1
bind_address = 0.0.0.0
; Options for the MochiWeb HTTP server.
;server_options = [{backlog, 128}, {acceptor_pool_size, 16}]
; For more socket options, consult Erlangs module <quote>inet<quote> man page.
;socket_options = [{recbuf, 262144}, {sndbuf, 262144}, {nodelay, true}]

; Uncomment next line to trigger basic-auth popup on unauthorized requests.
;WWW-Authenticate = Basic realm="administrator"

; Uncomment next line to set the configuration modification whitelist. Only
; whitelisted values may be changed via the /_config URLs. To allow the admin
; to change this value over HTTP, remember to include {httpd,config_whitelist}
; itself. Excluding it from the list would require editing this file to update
; the whitelist.
;config_whitelist = [{httpd,config_whitelist}, {log,level}, {etc,etc}]

[httpd_global_handlers]
;_google = {couch_httpd_proxy, handle_proxy_req, <<"http://www.google.com">>}

[couch_httpd_auth]
; If you set this to true, you should also uncomment the WWW-Authenticate line
; above. If you dont configure a WWW-Authenticate header, CouchDB will send
; Basic realm <equals> <quote>server<quote> in order to prevent you getting logged out.
; require_valid_user <equals> false
secret = 9f138f1b645de29ca25007c1d217c833

[log]
;level = debug

[os_daemons]
; For any commands listed here, CouchDB will attempt to ensure that
; the process remains alive while CouchDB runs as well as shut them
; down when CouchDB exits.
;foo = /path/to/command -with args

[daemons]
; enable SSL support by uncommenting the following line and supply the PEMs below.
; the default ssl port CouchDB listens on is 6984
; httpsd = {couch_httpd, start_link, [https]}

[ssl]
;cert_file = /full/path/to/server_cert.pem
;key_file = /full/path/to/server_key.pem

; To enable Virtual Hosts in CouchDB, add a vhost <equals> path directive. All requests to
; the Virual Host will be redirected to the path. In the example below all requests
; to http://example.com/ are redirected to /database.
; If you run CouchDB on a specific port, include the port number in the vhost:
; example.com:5984 = /database

[vhosts]
;example.com = /database/

[update_notification]
;unique notifier name=/full/path/to/exe -with <quote>cmd line arg<quote>

; To create an admin account uncomment the <quote>[admins]<quote> section below and add a
; line in the format <quote>username <equals> password<quote>. When you next start CouchDB, it
; will change the password to a hash (so that your passwords dont linger
; around in plain-text files). You can add more admin accounts with more
; <quote>username <equals> password<quote> lines. Dont forget to restart CouchDB after
; changing this.
[admins]
;admin = mysecretpassword
