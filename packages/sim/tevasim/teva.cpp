/*
 * Copyright ï¿½ 2008 UChicago Argonne, LLC
 * NOTICE: This computer software, TEVA-SPOT, was prepared for UChicago Argonne, LLC
 * as the operator of Argonne National Laboratory under Contract No. DE-AC02-06CH11357
 * with the Department of Energy (DOE). All rights in the computer software are reserved
 * by DOE on behalf of the United States Government and the Contractor as provided in
 * the Contract.
 * NEITHER THE GOVERNMENT NOR THE CONTRACTOR MAKES ANY WARRANTY, EXPRESS OR IMPLIED, OR
 * ASSUMES ANY LIABILITY FOR THE USE OF THIS SOFTWARE.
 *
 * This software is distributed under the BSD License.
 */
/*
 * Modified to flushsim 2010
 * dbhart, Sandia National Laboratories
 */
/* TEVA header */

#include "teva.h"
#include "version.h"
#include <utilib/OptionParser.h>
#include <sstream>

int main(int argc, char** argv)
/*
**--------------------------------------------------------------
** Module:  TEVA
** Usage:   tevasim [-s StorageMethod] [-tsg tsg-file] [-tsi tsi-file] [-tso tso-file] <epanet-input-file> <epanet-output-file>
** Input:   EPANET input file, threat simulation generator or input file
** Output:  program status, epanet output, simulation output database
** Purpose: generate tso format database of water quality data for specified
**          threat simulations
**---------------------------------------------------------------
*/
{
int tsofileversion=TSOFILEVERSION;
std::string tsgfname;
std::string tsifname;
std::string erdname;
std::string decfname;
std::string epanetinpfname;
std::string epanetoutfname;
std::string msxfname;
std::string msxspecies;
bool isMERLION = false;
int merlion_max_rhs = 100;
bool merlion_ignore_warnings = false;
bool isRLE = false;

utilib::OptionParser options;
std::string version = create_version("tevasim",__DATE__,__TIME__);

options.version(version);
options.add_usage("tevasim [options] <epanet-input-file> <epanet-output-file> <erd-db-name>");
options.description="A utility for running an ensemble of water quality simulations, whose results are stored in a TSO file.";
options.add("tsg",tsgfname,"The TSG file used to specify the injection incidents.");
options.add("tsi",tsifname,"The TSI file used to specify the injection incidents.");
options.add("msx",msxfname,"The MSX file for specifying multi-species EPANET.");
options.add("mss",msxspecies,"The MSX species to save.");
options.add("dvf",decfname,"The Decision Variable File (DVF) file used to specify the flushing/valve controls.");
options.add("merlion",isMERLION,"Uses Merlion to perform an ensemble of contaminant transport simulations, defined by a TSG File. **Requires more available memory (see the 'merlion-nsims' option).");
std::stringstream tmp_msg;
tmp_msg << "Speeds up the Merlion simulator by running multiple simulations at a time. " << 
           "Recommended values are between 1 (slower, but requires less memory) and 100 " <<
           "(faster, but uses more memory). (Default is " << merlion_max_rhs << ")";
options.add("merlion-nsims",merlion_max_rhs,tmp_msg.str());
options.add("merlion-ignore-warnings",merlion_ignore_warnings,"Ignore warnings and runs Merlion water quality model anyway.");
options.add("rle",isRLE,"Uses the rle compression scheme for writing erd files (default is lzma).");

options.add_argument("epanet-input-file","EPANET network file.");
options.add_argument("epanet-output-file","Output file generated by EPANET.");
options.add_argument("erd-db-name","The ERD database name.  A directory can be specified as part of this name - if there is one, the db files will be stored there");

options.epilog="The tevasim command is used to simulate contamination incidents. This command uses EPANET to perform an ensemble of contaminant transport simulations, defined by a TSG File. The following files are generated during the execution of tevasim:\n\
  - a binary ERD file that contains the contamination transport data,\n\
  - a binary SDX file that provides an index into the ERD File, and\n\
  - an output file that provides a textual summary of the EPANET simulations.\n\
\n\
Note that options like `tsg' can be specified with the syntax `--tsg file.tsg' or `--tsg=file.tsg'.";

utilib::OptionParser::args_t args = options.parse_args(argc,argv);

if(tsofileversion<1 || tsofileversion>TSOFILEVERSION) TEVASimError(1,"Invalid TSO File Version Flag\n");

//
// Check for errors in the command-line arguments
//
   if (options.help_option())
   {
      options.write(std::cout);
      return 1;
   }
   if (options.version_option())
   {
      options.print_version(std::cout);
      return 1;
   }

if (args.size() != 4)
{
   options.write(std::cerr);
   exit(9);
}
utilib::OptionParser::args_t::iterator curr = args.begin();
curr++;
epanetinpfname=*curr;
curr++;
epanetoutfname=*curr;
curr++;
erdname=*curr;

const char *tsg=NULL, *tsi=NULL, *dvf=NULL, *msx=NULL, *mss=NULL;
if (tsifname != "")
   tsi=tsifname.c_str();
if (tsgfname != "")
   tsg=tsgfname.c_str();
if (decfname != "")
   dvf=decfname.c_str();
if(msxfname != "")
   msx=msxfname.c_str();
if(msxspecies != "")
   mss=msxspecies.c_str();

 run_flushsim( tsg, tsi, erdname.c_str(), epanetinpfname.c_str(), epanetoutfname.c_str(), dvf, msx, mss, isMERLION, merlion_max_rhs, merlion_ignore_warnings, isRLE);

return 0;
}
