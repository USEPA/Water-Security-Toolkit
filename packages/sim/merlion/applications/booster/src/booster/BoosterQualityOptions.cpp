#include "BoosterQualityOptions.hpp"

#include <string>
#include <iostream>
#include <cstdlib>
#include <sstream>

BoosterQualityOptions::BoosterQualityOptions()
   :
   BoosterOptions(),
   epanet_output_filename("booster-epanet.rpt"),
   merlion_save_filename(""),
   inp_filename(""),
   wqm_filename(""),
   booster_filename(""),
   decay_k(-1.0f)
{

   std::stringstream descr;
   descr << "boosterquality [Options] " << 
      "<Required Network Option> " << 
      "<booster-spec-file>";
   option_parser_.add_usage(descr.str());
   descr.str(std::string());
   descr << "A utility for rapid scenario data generation " << 
      "used to determine optimal booster station locations " <<
      "in water distribution systems.";
   option_parser_.description = descr.str();
   option_parser_.version("boosterquality 1.0");
   option_parser_.alias("version","v");

   // Add Epilog 
   option_parser_.epilog  = "The boostersim command is used to generate scenarios for finding optimal booster station locations ";
   option_parser_.epilog += "in water distribution systems. This executable uses Merlion to perform water quality simulations ";
   option_parser_.epilog += "on a scenario ensemble and generates the required data files to solve an optimization problem. ";

   // Add arguments
   option_parser_.add_argument("booster specifications file","A file defining booster station specifications.");

   // Add Optional Arguments
   std::string cat_string;
   ////////////////// Required Network Option
   cat_string = "Required Network Option";
   // inp
   descr.str(std::string());
   descr << "EPANET network files.";
   option_parser_.add("inp",inp_filename, descr.str());
   option_parser_.categorize("inp",cat_string);
   // wqm
   descr.str(std::string());
   descr << "Merlion wqm file.";
   option_parser_.add("wqm",wqm_filename, descr.str());
   option_parser_.categorize("wqm",cat_string);

   ////////////////// EPANET Input File Options
   cat_string = "EPANET Input File Options";
   // decay-const
   descr.str(std::string()); 
   descr << "First-order decay coefficient for booster agent(1/min). " << 
            "The default value is equal to bulk reaction k in INP file"; 
   option_parser_.add("decay-const",decay_k, descr.str());
   option_parser_.categorize("decay-const",cat_string);
   // epanet-rpt-file  
   descr.str(std::string());
   descr << "Output file generated by EPANET during hydraulic " <<
      "simulations.";
   option_parser_.add("epanet-rpt-file",epanet_output_filename, descr.str());
   option_parser_.categorize("epanet-rpt-file",cat_string);
   // merlion-save-file  
   descr.str(std::string());
   descr << "Text file defining the Merlion water quality model.";
   option_parser_.add("merlion-save-file",merlion_save_filename, descr.str());
   option_parser_.categorize("merlion-save-file",cat_string);
   
}

void BoosterQualityOptions::PrintSummary(std::ostream& out)
{
   out << "\nSummary of Input Options\n";
   option_parser_.write_values(out);
   out << ";\n";
   out << std::endl;
}

bool BoosterQualityOptions::isDefault(std::string option_name) {
   return !option_parser_.initialized(option_name);
}

void BoosterQualityOptions::ParseInputs(int argc, char** argv)
{

   // Parse the arguments
   utilib::OptionParser::args_t args = option_parser_.parse_args(argc,argv);

   // check for help or version request and exit  
   if (option_parser_.help_option()) {
      option_parser_.write(std::cout);
      exit(0);
   }
   if (option_parser_.version_option()) {
      option_parser_.print_version(std::cout);
      exit(0);
   }

   utilib::OptionParser::args_t::iterator curr = args.begin();
   ++curr;
   if (curr == args.end()) {
      option_parser_.write(std::cout);
      std::cerr << std::endl;
      std::cerr << "ERROR: Missing booster station spec file argument." << std::endl;
      std::cerr << std::endl;
      exit(1);
   }
   booster_filename = *curr++;
   if (curr != args.end()) {
      std::cerr << std::endl;
      std::cerr << "ERROR:   Extra command line arguments were detected after final argument." << std::endl;
      std::cerr << "         Optional arguments must go before required arguments, otherwise" << std::endl;
      std::cerr << "         they will be ignored." << std::endl;
      std::cerr << std::endl;
      exit(1);
   }
}
