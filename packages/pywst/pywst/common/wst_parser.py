
__all__ = ['add_subparser', 'get_parser']

import argparse

doc="This is the top-level command for the water security toolkit."
epilog="""
The water security toolkit supports a variety of different water security
analysis tools.  Different tools are executed as subcommands of this
command.  Each subcommand supports independent command-line options.
Use the -h option to print details for a subcommand.  For example, type

   wst flushing -h

to print information about the `flushing` subcommand.

By convention, wst subcommands take a single argument that is a YAML configuration file.  The
output of a wst subcommand is a JSON file.
"""
wst_parser = argparse.ArgumentParser(description=doc, epilog=epilog, formatter_class=argparse.RawDescriptionHelpFormatter)
wst_parser.add_argument("-t", "--trace-exceptions", dest="trace", action="store_true",
    default=False,
    help="catch exceptions generated by WST subcommands and print a stack trace")

wst_subparsers = wst_parser.add_subparsers(dest='subparser_name', title='subcommands', description='valid subcommands')

def add_subparser(name, **args):
    """Add a subparser to the 'wst' command."""
    func = None
    if 'func' in args:
        func = args['func']
        del args['func']
    parser = wst_subparsers.add_parser(name, **args)
    if not func is None:
        parser.set_defaults(func=func) 
    return parser

def get_parser():                                               #pragma:nocover
    """Return the parser used by the 'wst' commmand."""
    return wst_parser

