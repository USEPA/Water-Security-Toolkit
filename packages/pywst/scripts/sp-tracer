#!/usr/bin/python
#
# A sensor-placement tool for tracer studies.  In particular, this 
# takes a TSI file that defines the tracer study, and then generates an
# impact file that augments the tracer injections with pseudo-injections
# at the locations that the tracer visits during the water quality simulation.
# Pseudo-injections are generated during regular intervals of the injection
# simulation, to account for the fact that tracer dynamics will differ
# throughout the simulation period.
#

import time
import string
import sys
import re
import os
import os.path
import commands
import re
import tempfile
import sets

tsifile=""
generate_witnesses=0
witnesslistfile=""
duration=3600 # 1 hour = 3600 seconds
debug=0
agefile=""
nodemap = {}
feasible_locations = sets.Set()

def generate_tsi(witnesslistfile, duration, tsifile):
  INPUT = open(witnesslistfile,"r")
  OUTPUT = open(tsifile,"w")
  for line in INPUT.xreadlines():
    vals = re.split('[ \t]+',line.strip()) #line.split(" ")
    id = vals[0]
    for i in range(2,len(vals)):
      print >>OUTPUT, id, 1, 1, 1.00e+02, eval(vals[i]), (eval(vals[i])+duration)
  OUTPUT.close()
  INPUT.close()

def generate_locations(witnesslistfile, locationsfile):
  INPUT = open(witnesslistfile,"r")
  OUTPUT = open(locationsfile,"w")
  print >>OUTPUT, "infeasible ALL"
  for line in INPUT.xreadlines():
    vals = re.split('[ \t]+',line.strip()) #line.split(" ")
    id = vals[0]
    print >>OUTPUT, "feasible " + id
    feasible_locations.add(id)
  OUTPUT.close()
  INPUT.close()

def generate_ampldata(agefile, ampldatafile, nodemapfile):
  NODES = open(nodemapfile,"r")
  i=1
  for line in NODES.xreadlines():
    vals = re.split('[ \t]+',line.strip())
    if vals[1] in feasible_locations:
       nodemap[vals[1]] = i
       i=i+1
  NODES.close()
  INPUT = open(agefile,"r")
  OUTPUT = open(ampldatafile,"w")
  i=0
  for line in INPUT.xreadlines():
    if i==0:
       target = re.split('[ \t]+',line.strip()) #line.split(" ")
       print >>OUTPUT, "#"
       print >>OUTPUT, "# Water age weights - generated by sp-tracer"
       print >>OUTPUT, "#"
       print >>OUTPUT, "param NumWeightCategories := " + `len(target)` + ";"
       print >>OUTPUT, "#"
       print >>OUTPUT, "param TargetWeightDistribution :="
       j = 0
       for val in target:
         print >>OUTPUT, (j+1), val
         j = j+1
       print >>OUTPUT, ";"
       print >>OUTPUT, "#"
       print >>OUTPUT, "param LocationWeightDistribution :="
    else:
       vals = re.split('[ \t]+',line.strip()) #line.split(" ")
       for j in range(1,len(vals)):
         if vals[0] in feasible_locations:
	    print >>OUTPUT, nodemap[vals[0]], j, vals[j]
    i = i + 1
  print >>OUTPUT, ";"
  INPUT.close()
  OUTPUT.close()

def system_call(command,outfile,flag):
  if sys.platform[0:3] == "win":
     cmdline = command
     if outfile != "":
        if flag:
           cmdline = cmdline + " > " + outfile
        else:
           cmdline = cmdline + " >> " + outfile
  elif sys.platform[0:5] == "linux" or sys.platform == "cygwin":
     cmdline = "(" + command
     if outfile != "":
        if flag:
           cmdline = cmdline + ") > " + outfile + " 2>&1"
        else:
           cmdline = cmdline + ") >> " + outfile + " 2>&1"
     else:
        cmdline = cmdline + ")"
  else:
     print "ERROR: unknown platform " + sys.platform
     sys.exit(1)
  if debug:
     print "Running local command: " + cmdline
  return os.system(cmdline)


def print_help():
   print ""
   print "sp-tracer - a python script for performing sensor placement for a tracer study"
   print ""
   print "usage:"
   print ""
   print "   sp-tracer --inp=<EPANET-input> <witness-list-file>"
   print "   sp-tracer --ages=<AGE-input> <witness-list-file> [sp-options]"
   print ""
   print "options:"
   print ""
   print "   --inp=<EPANET-input>"
   print "      A EPANET input file"
   print ""
   print "   --path=<SPOT-root-path>"
   print "      The root directory of SPOT"
   print ""
   print "   --ages=<AGE-input>"
   print "      A file that specifies the ages associated with feasible locations,"
   print "      along with the target distribution of desired ages"
   print ""

##
## MAIN
##
if (len(sys.argv) < 2):
   print_help()
   sys.exit()

#
# Process command-line options
#
cmdline=""
i=1
sp_options=0
sp_cmd=""
spotpath="./"
while (i < len(sys.argv)):
  #
  # Save the original command line
  #
  cmdline = cmdline + " " + sys.argv[1]
  #
  # Processing sp options
  #
  if sp_options != 1:
     if (sys.argv[i]).startswith("--") == False:
        print "ERROR: argument \"%s\" does not start with --\n" % sys.argv[i]
        sys.exit(1)
     tmp = (sys.argv[i].replace("--","")).split("=")
     #
     # Process the option
     #
     if tmp[0] == "tsi":
        tsifile = tmp[1]
        generate_witnesses=1

     elif tmp[0] == "path":
        spotpath = tmp[1]

     elif tmp[0] == "inp":
        epanetfile = tmp[1]
        sp_options=3

     elif tmp[0] == "ages":
        agefile = tmp[1]
        generate_witnesses=0
        witnesslistfile = sys.argv[i+1]
        sp_options = 2
        i+=1

     elif sp_options == 2:
        sp_options = 1

     else:
        print "ERROR: unknown command line option \"%s\"" % tmp[0]
        sys.exit(1)

  if sp_options == 1:
     sp_cmd = sp_cmd + " " + sys.argv[i]

  elif sp_options == 3:
     generate_witnesses=0
     witnesslistfile = sys.argv[i+1]
     break

  i+=1

tname=(witnesslistfile.split("."))[0] + "tracer"
tmpname=tname+".tmp"

if agefile == "" and witnesslistfile == "":
   print "ERROR: must specify either an ages file or a witness list file"
   sys.exit(1)

##
## Generate initial list
##
if generate_witnesses == 1:
   #
   # Call tevasim
   #
   # TODO: add error checks!
   #
   expname = tsifile.split(".")[0]
   system_call(spotpath + "/bin/tevasim -tsi " + tsifile + " -tso " + expname + ".tso ")
   system_call(spotpath + "/bin/tso2Impact -tso " + expname + ".tso")

if agefile == "":
   #
   # Generate TSI file from witness list file
   #
   print ". Building TSI file"
   generate_tsi(witnesslistfile, duration, tname + ".tsi")
   #
   # Build impact file 
   #
   print ". Building TSO file"
   system_call(spotpath + "/bin/tevasim -tsi " + tname + ".tsi -tso " + tname + ".tso " + epanetfile + " " + tname + ".out",tmpname,True)
   print ". Building Impact file"
   system_call(spotpath + "/bin/tso2Impact " + tname + " " + tname + ".tso -td -nfd -epanetin " + epanetfile,tmpname,True)
   sys.exit(0)

print ". Creating set of feasible sensor locations"
generate_locations(witnesslistfile, tname + ".locations")
print ". Creating AMPL data file with age information"
generate_ampldata(agefile, tname + "-age.dat", tname+".nodemap")
print ". Building sensor placement file"
system_call(spotpath + "/bin/sp --network=" + tname + " --sensor-locations=" + tname + ".locations --path=" + spotpath + "/bin --path=" + spotpath + "/packages/acro/bin --path=" + spotpath + "/packages/sp/mod --ampldata=" + tname + "-age.dat " + sp_cmd,tmpname,True)
#
# Print sensor placement output
#
print ". Sensor placement summary"
INPUT = open(tmpname,"r")
for line in INPUT.xreadlines():
  print line,
INPUT.close()
